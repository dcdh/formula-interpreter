{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "infrastructure API",
    "version" : "1.0-SNAPSHOT"
  },
  "servers" : [ {
    "url" : "http://localhost:8080",
    "description" : "Auto generated value"
  }, {
    "url" : "http://0.0.0.0:8080",
    "description" : "Auto generated value"
  } ],
  "paths" : {
    "/execute" : {
      "post" : {
        "tags" : [ "Executor Endpoint" ],
        "operationId" : "execute",
        "requestBody" : {
          "content" : {
            "application/vnd.formula-execute-v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Execute"
              },
              "examples" : {
                "Incomplete formula" : {
                  "description" : "Should fail to execute",
                  "value" : {
                    "formula" : "IF",
                    "structuredReferences" : {
                      "Sales Amount" : "260",
                      "% Commission" : "10"
                    },
                    "debugFeature" : "ACTIVE"
                  }
                },
                "Compute commission amount by multiplying Sales Amount by Percent Commission" : {
                  "description" : "Compute commission amount by multiplying Sales Amount by Percent Commission",
                  "value" : {
                    "formula" : "MUL([@[Sales Amount]],DIV([@[% Commission]],100))",
                    "structuredReferences" : {
                      "Sales Amount" : "260",
                      "% Commission" : "10"
                    },
                    "debugFeature" : "ACTIVE"
                  }
                },
                "Compute commission amount by multiplying Sales Amount by Percent Commission if it is Joe multiply by two" : {
                  "description" : "Compute commission amount by multiplying Sales Amount by Percent Commission if it is Joe multiply by two",
                  "value" : {
                    "formula" : "IF(EQ([@[Sales Person]],\"Joe\"),MUL(MUL([@[Sales Amount]],DIV([@[% Commission]],100)),2),MUL([@[Sales Amount]],DIV([@[% Commission]],100)))",
                    "structuredReferences" : {
                      "Sales Amount" : "260",
                      "% Commission" : "10"
                    },
                    "debugFeature" : "ACTIVE"
                  }
                },
                "Fail on unknown Structured Reference" : {
                  "description" : "Should return #REF! on unknown Structured Reference",
                  "value" : {
                    "formula" : "IF(EQ([@[Sales Person]],\"Joe\"),MUL(MUL([@[Sales Amount BOOM]],DIV([@[% Commission]],100)),2),MUL([@[Sales Amount]],DIV([@[% Commission]],100)))",
                    "structuredReferences" : {
                      "Sales Person" : "Joe",
                      "Sales Amount" : "260",
                      "% Commission" : "10"
                    },
                    "debugFeature" : "ACTIVE"
                  }
                },
                "Fail when dividing by zero" : {
                  "description" : "Should return #DIV/0! when dividing by zero",
                  "value" : {
                    "formula" : "IF(EQ([@[Sales Person]],\"Joe\"),MUL(MUL([@[Sales Amount]],DIV([@[% Commission]],0)),2),MUL([@[Sales Amount]],DIV([@[% Commission]],100)))",
                    "structuredReferences" : {
                      "Sales Person" : "Joe",
                      "Sales Amount" : "260",
                      "% Commission" : "10"
                    },
                    "debugFeature" : "ACTIVE"
                  }
                },
                "Fail when doing an operation on not a number" : {
                  "description" : "Should return #NUM! when doing an operation on not a number",
                  "value" : {
                    "formula" : "MUL([@[Sales Amount]],\"not a number\")",
                    "structuredReferences" : {
                      "Sales Amount" : "260"
                    },
                    "debugFeature" : "ACTIVE"
                  }
                },
                "Check if it is a number" : {
                  "description" : "Should return I am a number if the Structured Reference is a number",
                  "value" : {
                    "formula" : "IF(ISNUM([@[Sales Amount]]),\"I am a number\", \"I am not a number\")",
                    "structuredReferences" : {
                      "Sales Amount" : "260"
                    },
                    "debugFeature" : "ACTIVE"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/vnd.formula-execution-v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExecutionResult"
                },
                "examples" : {
                  "executed formula" : {
                    "description" : "executed formula",
                    "value" : {
                      "result" : "26",
                      "exactProcessedInNanos" : 28231378,
                      "parserExecutionProcessedIn" : {
                        "executedAtStart" : "2024-05-05T01:09:39.695736969+02:00",
                        "executedAtEnd" : "2024-05-05T01:09:39.717878532+02:00",
                        "processedInNanos" : 22141563
                      },
                      "executionProcessedIn" : {
                        "executedAtStart" : "2024-05-05T01:09:39.722660591+02:00",
                        "executedAtEnd" : "2024-05-05T01:09:39.728750406+02:00",
                        "processedInNanos" : 6089815
                      },
                      "elementExecutions" : [ {
                        "executedAtStart" : "2024-05-05T01:09:39.724292501+02:00",
                        "executedAtEnd" : "2024-05-05T01:09:39.728590951+02:00",
                        "processedInNanos" : 4298450,
                        "range" : {
                          "start" : 0,
                          "end" : 48
                        },
                        "inputs" : [ {
                          "name" : "left",
                          "value" : "260",
                          "range" : {
                            "start" : 4,
                            "end" : 20
                          }
                        }, {
                          "name" : "right",
                          "value" : "0.1",
                          "range" : {
                            "start" : 22,
                            "end" : 47
                          }
                        } ],
                        "result" : "26"
                      }, {
                        "executedAtStart" : "2024-05-05T01:09:39.724415205+02:00",
                        "executedAtEnd" : "2024-05-05T01:09:39.726876407+02:00",
                        "processedInNanos" : 2461202,
                        "range" : {
                          "start" : 4,
                          "end" : 20
                        },
                        "inputs" : [ {
                          "name" : "structuredReference",
                          "value" : "Sales Amount",
                          "range" : {
                            "start" : 7,
                            "end" : 18
                          }
                        } ],
                        "result" : "260"
                      }, {
                        "executedAtStart" : "2024-05-05T01:09:39.727326633+02:00",
                        "executedAtEnd" : "2024-05-05T01:09:39.728449028+02:00",
                        "processedInNanos" : 1122395,
                        "range" : {
                          "start" : 22,
                          "end" : 47
                        },
                        "inputs" : [ {
                          "name" : "left",
                          "value" : "10",
                          "range" : {
                            "start" : 26,
                            "end" : 42
                          }
                        }, {
                          "name" : "right",
                          "value" : "100",
                          "range" : {
                            "start" : 44,
                            "end" : 46
                          }
                        } ],
                        "result" : "0.1"
                      }, {
                        "executedAtStart" : "2024-05-05T01:09:39.727336957+02:00",
                        "executedAtEnd" : "2024-05-05T01:09:39.727368776+02:00",
                        "processedInNanos" : 31819,
                        "range" : {
                          "start" : 26,
                          "end" : 42
                        },
                        "inputs" : [ {
                          "name" : "structuredReference",
                          "value" : "% Commission",
                          "range" : {
                            "start" : 29,
                            "end" : 40
                          }
                        } ],
                        "result" : "10"
                      }, {
                        "executedAtStart" : "2024-05-05T01:09:39.727476161+02:00",
                        "executedAtEnd" : "2024-05-05T01:09:39.72750957+02:00",
                        "processedInNanos" : 33409,
                        "range" : {
                          "start" : 44,
                          "end" : 46
                        },
                        "inputs" : [ ],
                        "result" : "100"
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Syntax exception while executing formula",
            "content" : {
              "application/vnd.execution-syntax-error-v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                },
                "examples" : {
                  "Syntax in error" : {
                    "description" : "Syntax in error",
                    "value" : {
                      "message" : "Syntax error at line '0' at range '1' with message 'custom \"msg\"'"
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unhandled exception while executing formula",
            "content" : {
              "application/vnd.execution-unexpected-exception-v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                },
                "examples" : {
                  "Unexpected exception" : {
                    "description" : "Unexpected exception",
                    "value" : {
                      "message" : "unexpected \"exception\""
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/suggestCompletion" : {
      "post" : {
        "tags" : [ "Suggest Completion Endpoint" ],
        "operationId" : "suggestCompletion",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "suggestedFormula" ],
                "type" : "object",
                "properties" : {
                  "suggestedFormula" : {
                    "description" : "Suggest tokens",
                    "type" : "string",
                    "example" : "IF"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/vnd.suggest-completion-v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "examples" : {
                  "List of suggested tokens" : {
                    "description" : "List of suggested tokens",
                    "value" : [ "(" ]
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "AutoSuggestion service execution exception while processing formula",
            "content" : {
              "application/vnd.autosuggestion-unavailable-v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                },
                "examples" : {
                  "Syntax in error" : {
                    "description" : "Syntax in error",
                    "value" : {
                      "message" : "AutoSuggestion service execution unavailable while processing formula 'IF(EQ([@[Sales Person]],\"Joe\"),MUL(MUL([@[Sales Amount]],DIV([@[% Commission]],100)),2),MUL([@[Sales Amount]],DIV([@[% Commission]],100)' - msg 'error'"
                    }
                  }
                }
              },
              "application/vnd.autosuggestion-execution-exception-v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                },
                "examples" : {
                  "Syntax in error" : {
                    "description" : "Syntax in error",
                    "value" : {
                      "message" : "AutoSuggestion service execution exception while processing formula 'IF(EQ([@[Sales Person]],\"Joe\"),MUL(MUL([@[Sales Amount]],DIV([@[% Commission]],100)),2),MUL([@[Sales Amount]],DIV([@[% Commission]],100)' - msg 'error'"
                    }
                  }
                }
              },
              "application/vnd.autosuggestion-unexpected-exception-v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                },
                "examples" : {
                  "Syntax in error" : {
                    "description" : "Syntax in error",
                    "value" : {
                      "message" : "unexpected \"exception\""
                    }
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "AutoSuggestion service has timed out while executing formula",
            "content" : {
              "application/vnd.autosuggestion-execution-timed-out-v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                },
                "examples" : {
                  "Syntax in error" : {
                    "description" : "Syntax in error",
                    "value" : {
                      "message" : "AutoSuggestion service has timed out while executing formula 'IF(EQ([@[Sales Person]],\"Joe\"),MUL(MUL([@[Sales Amount]],DIV([@[% Commission]],100)),2),MUL([@[Sales Amount]],DIV([@[% Commission]],100)' - Infinite loop in Grammar - msg 'error'"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/validate" : {
      "post" : {
        "tags" : [ "Validator Endpoint" ],
        "operationId" : "validate",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "formula" ],
                "type" : "object",
                "properties" : {
                  "formula" : {
                    "description" : "Formula to validate",
                    "type" : "string",
                    "example" : "MUL([@[Sales Amount]],DIV([@[% Commission]],100))"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/vnd.formula-validator-v1+json" : {
                "schema" : {
                  "required" : [ "valid", "valid" ],
                  "type" : "object",
                  "properties" : {
                    "valid" : {
                      "type" : "boolean"
                    },
                    "line" : {
                      "format" : "int32",
                      "type" : "integer"
                    },
                    "charPositionInLine" : {
                      "format" : "int32",
                      "type" : "integer"
                    },
                    "msg" : {
                      "type" : "string"
                    }
                  }
                },
                "examples" : {
                  "Valid formula validated" : {
                    "description" : "MUL([@[Sales Amount]],DIV([@[% Commission]],100))",
                    "value" : {
                      "valid" : true
                    }
                  },
                  "Invalid formula validated" : {
                    "description" : "MUL([@[Sales Amount]],DIV([@[% Commission]],100)",
                    "value" : {
                      "valid" : false,
                      "line" : 1,
                      "charPositionInLine" : 48,
                      "msg" : "missing ')' at '<EOF>'"
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Validation service execution exception while processing formula",
            "content" : {
              "application/vnd.validation-unexpected-exception-v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorMessage"
                },
                "examples" : {
                  "Syntax in error" : {
                    "description" : "Syntax in error",
                    "value" : {
                      "message" : "unexpected \"exception\""
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "DebugFeature" : {
        "enum" : [ "ACTIVE", "INACTIVE" ],
        "type" : "string"
      },
      "ElementExecution" : {
        "required" : [ "executedAtStart", "executedAtEnd", "processedInNanos", "range", "inputs", "value", "executedAtStart", "executedAtEnd", "processedInNanos", "range", "inputs", "result" ],
        "type" : "object",
        "properties" : {
          "executedAtStart" : {
            "type" : "string",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ZonedDateTime"
            } ]
          },
          "executedAtEnd" : {
            "type" : "string",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ZonedDateTime"
            } ]
          },
          "processedInNanos" : {
            "format" : "int64",
            "type" : "integer"
          },
          "range" : {
            "$ref" : "#/components/schemas/Range"
          },
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Input"
            }
          },
          "result" : {
            "type" : "string"
          }
        }
      },
      "ErrorMessage" : {
        "required" : [ "message", "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          }
        }
      },
      "Execute" : {
        "required" : [ "formula", "structuredReferences", "debugFeature", "formula", "structuredReferences", "debugFeature" ],
        "type" : "object",
        "properties" : {
          "formula" : {
            "type" : "string"
          },
          "structuredReferences" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "debugFeature" : {
            "$ref" : "#/components/schemas/DebugFeature"
          }
        }
      },
      "ExecutionProcessedIn" : {
        "required" : [ "executedAtStart", "executedAtEnd", "processedInNanos", "executedAtStart", "executedAtEnd", "processedInNanos" ],
        "type" : "object",
        "properties" : {
          "executedAtStart" : {
            "type" : "string",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ZonedDateTime"
            } ]
          },
          "executedAtEnd" : {
            "type" : "string",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ZonedDateTime"
            } ]
          },
          "processedInNanos" : {
            "format" : "int64",
            "type" : "integer"
          }
        }
      },
      "ExecutionResult" : {
        "required" : [ "result", "exactProcessedInNanos", "executionProcessedIn", "elementExecutions", "result", "exactProcessedInNanos", "executionProcessedIn", "elementExecutions" ],
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "string"
          },
          "exactProcessedInNanos" : {
            "format" : "int64",
            "type" : "integer"
          },
          "parserExecutionProcessedIn" : {
            "$ref" : "#/components/schemas/ParserExecutionProcessedIn"
          },
          "executionProcessedIn" : {
            "$ref" : "#/components/schemas/ExecutionProcessedIn"
          },
          "elementExecutions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ElementExecution"
            }
          }
        }
      },
      "Input" : {
        "required" : [ "name", "value", "range", "name", "value", "range" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "range" : {
            "$ref" : "#/components/schemas/Range"
          }
        }
      },
      "ParserExecutionProcessedIn" : {
        "required" : [ "executedAtStart", "executedAtEnd", "processedInNanos", "executedAtStart", "executedAtEnd", "processedInNanos" ],
        "type" : "object",
        "properties" : {
          "executedAtStart" : {
            "type" : "string",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ZonedDateTime"
            } ]
          },
          "executedAtEnd" : {
            "type" : "string",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ZonedDateTime"
            } ]
          },
          "processedInNanos" : {
            "format" : "int64",
            "type" : "integer"
          }
        }
      },
      "Range" : {
        "required" : [ "start", "end", "start", "end" ],
        "type" : "object",
        "properties" : {
          "start" : {
            "format" : "int32",
            "type" : "integer"
          },
          "end" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      },
      "Validation" : {
        "required" : [ "valid", "valid" ],
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "boolean"
          },
          "line" : {
            "format" : "int32",
            "type" : "integer"
          },
          "charPositionInLine" : {
            "format" : "int32",
            "type" : "integer"
          },
          "msg" : {
            "type" : "string"
          }
        }
      },
      "ZonedDateTime" : {
        "format" : "date-time",
        "type" : "string",
        "example" : "2022-03-10T12:15:50-04:00"
      }
    }
  }
}